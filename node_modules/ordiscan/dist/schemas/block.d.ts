import { z } from "zod";
export declare const BlockStatusSchema: z.ZodObject<{
    runes_indexed: z.ZodBoolean;
    inscriptions_indexed: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    runes_indexed: boolean;
    inscriptions_indexed: boolean;
}, {
    runes_indexed: boolean;
    inscriptions_indexed: boolean;
}>;
export declare const BlockSchema: z.ZodObject<{
    hash: z.ZodString;
    height: z.ZodNumber;
    timestamp: z.ZodString;
    size: z.ZodNumber;
    weight: z.ZodNumber;
    status: z.ZodObject<{
        runes_indexed: z.ZodBoolean;
        inscriptions_indexed: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        runes_indexed: boolean;
        inscriptions_indexed: boolean;
    }, {
        runes_indexed: boolean;
        inscriptions_indexed: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    status: {
        runes_indexed: boolean;
        inscriptions_indexed: boolean;
    };
    timestamp: string;
    hash: string;
    height: number;
    size: number;
    weight: number;
}, {
    status: {
        runes_indexed: boolean;
        inscriptions_indexed: boolean;
    };
    timestamp: string;
    hash: string;
    height: number;
    size: number;
    weight: number;
}>;
export declare const RuneTxidsSchema: z.ZodArray<z.ZodString, "many">;
export type BlockStatus = z.infer<typeof BlockStatusSchema>;
export type Block = z.infer<typeof BlockSchema>;
export type RuneTxids = z.infer<typeof RuneTxidsSchema>;
//# sourceMappingURL=block.d.ts.map