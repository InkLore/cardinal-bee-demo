import { z } from "zod";
export declare const AlkaneBaseSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodNullable<z.ZodString>;
    symbol: z.ZodNullable<z.ZodString>;
    type: z.ZodEnum<["TOKEN", "CONTRACT", "NFT_COLLECTION", "NFT_ITEM"]>;
    logo_url: z.ZodNullable<z.ZodString>;
    premined_supply: z.ZodString;
    amount_per_mint: z.ZodNullable<z.ZodString>;
    mint_count_cap: z.ZodNullable<z.ZodString>;
    deploy_txid: z.ZodNullable<z.ZodString>;
    deploy_timestamp: z.ZodNullable<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    symbol: string | null;
    id: string;
    name: string | null;
    type: "TOKEN" | "CONTRACT" | "NFT_COLLECTION" | "NFT_ITEM";
    logo_url: string | null;
    premined_supply: string;
    amount_per_mint: string | null;
    mint_count_cap: string | null;
    deploy_txid: string | null;
    deploy_timestamp: string | null;
}, {
    symbol: string | null;
    id: string;
    name: string | null;
    type: "TOKEN" | "CONTRACT" | "NFT_COLLECTION" | "NFT_ITEM";
    logo_url: string | null;
    premined_supply: string;
    amount_per_mint: string | null;
    mint_count_cap: string | null;
    deploy_txid: string | null;
    deploy_timestamp: string | null;
}>;
export type Alkane = z.infer<typeof AlkaneBaseSchema>;
export declare const AlkaneWithSupplySchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    name: z.ZodNullable<z.ZodString>;
    symbol: z.ZodNullable<z.ZodString>;
    type: z.ZodEnum<["TOKEN", "CONTRACT", "NFT_COLLECTION", "NFT_ITEM"]>;
    logo_url: z.ZodNullable<z.ZodString>;
    premined_supply: z.ZodString;
    amount_per_mint: z.ZodNullable<z.ZodString>;
    mint_count_cap: z.ZodNullable<z.ZodString>;
    deploy_txid: z.ZodNullable<z.ZodString>;
    deploy_timestamp: z.ZodNullable<z.ZodString>;
}, {
    current_supply: z.ZodString;
    current_mint_count: z.ZodNumber;
}>, "strict", z.ZodTypeAny, {
    symbol: string | null;
    id: string;
    name: string | null;
    type: "TOKEN" | "CONTRACT" | "NFT_COLLECTION" | "NFT_ITEM";
    logo_url: string | null;
    premined_supply: string;
    amount_per_mint: string | null;
    mint_count_cap: string | null;
    deploy_txid: string | null;
    deploy_timestamp: string | null;
    current_supply: string;
    current_mint_count: number;
}, {
    symbol: string | null;
    id: string;
    name: string | null;
    type: "TOKEN" | "CONTRACT" | "NFT_COLLECTION" | "NFT_ITEM";
    logo_url: string | null;
    premined_supply: string;
    amount_per_mint: string | null;
    mint_count_cap: string | null;
    deploy_txid: string | null;
    deploy_timestamp: string | null;
    current_supply: string;
    current_mint_count: number;
}>;
export type AlkaneWithSupply = z.infer<typeof AlkaneWithSupplySchema>;
export declare const AlkaneBalanceSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodNullable<z.ZodString>;
    symbol: z.ZodNullable<z.ZodString>;
    balance: z.ZodString;
}, "strict", z.ZodTypeAny, {
    symbol: string | null;
    id: string;
    name: string | null;
    balance: string;
}, {
    symbol: string | null;
    id: string;
    name: string | null;
    balance: string;
}>;
export type AlkaneBalance = z.infer<typeof AlkaneBalanceSchema>;
export declare const AlkaneUtxoSchema: z.ZodObject<{
    outpoint: z.ZodString;
    value: z.ZodNumber;
    alkanes: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodNullable<z.ZodString>;
        symbol: z.ZodNullable<z.ZodString>;
        balance: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        symbol: string | null;
        id: string;
        name: string | null;
        balance: string;
    }, {
        symbol: string | null;
        id: string;
        name: string | null;
        balance: string;
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    value: number;
    outpoint: string;
    alkanes: {
        symbol: string | null;
        id: string;
        name: string | null;
        balance: string;
    }[];
}, {
    value: number;
    outpoint: string;
    alkanes: {
        symbol: string | null;
        id: string;
        name: string | null;
        balance: string;
    }[];
}>;
export type AlkaneUtxo = z.infer<typeof AlkaneUtxoSchema>;
export declare const AlkaneMethodParamSchema: z.ZodObject<{
    type: z.ZodString;
    name: z.ZodString;
}, "strict", z.ZodTypeAny, {
    name: string;
    type: string;
}, {
    name: string;
    type: string;
}>;
export type AlkaneMethodParam = z.infer<typeof AlkaneMethodParamSchema>;
export declare const AlkaneMethodSchema: z.ZodObject<{
    name: z.ZodString;
    opcode: z.ZodNumber;
    params: z.ZodArray<z.ZodObject<{
        type: z.ZodString;
        name: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        name: string;
        type: string;
    }, {
        name: string;
        type: string;
    }>, "many">;
    returns: z.ZodString;
}, "strict", z.ZodTypeAny, {
    name: string;
    params: {
        name: string;
        type: string;
    }[];
    opcode: number;
    returns: string;
}, {
    name: string;
    params: {
        name: string;
        type: string;
    }[];
    opcode: number;
    returns: string;
}>;
export type AlkaneMethod = z.infer<typeof AlkaneMethodSchema>;
export declare const AlkaneMetaSchema: z.ZodObject<{
    name: z.ZodNullable<z.ZodString>;
    methods: z.ZodNullable<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        opcode: z.ZodNumber;
        params: z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            name: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            name: string;
            type: string;
        }, {
            name: string;
            type: string;
        }>, "many">;
        returns: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        name: string;
        params: {
            name: string;
            type: string;
        }[];
        opcode: number;
        returns: string;
    }, {
        name: string;
        params: {
            name: string;
            type: string;
        }[];
        opcode: number;
        returns: string;
    }>, "many">>;
}, "strict", z.ZodTypeAny, {
    name: string | null;
    methods: {
        name: string;
        params: {
            name: string;
            type: string;
        }[];
        opcode: number;
        returns: string;
    }[] | null;
}, {
    name: string | null;
    methods: {
        name: string;
        params: {
            name: string;
            type: string;
        }[];
        opcode: number;
        returns: string;
    }[] | null;
}>;
export type AlkaneMeta = z.infer<typeof AlkaneMetaSchema>;
export declare const ProtostoneMessageSchema: z.ZodObject<{
    type: z.ZodEnum<["TRANSFER", "CONTRACT_CALL", "CONTRACT_DEPLOY", "FACTORY_DEPLOY", "FACTORY_CLONE"]>;
    alkaneId: z.ZodOptional<z.ZodString>;
    opcode: z.ZodOptional<z.ZodNumber>;
    amount: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    type: "TRANSFER" | "CONTRACT_CALL" | "CONTRACT_DEPLOY" | "FACTORY_DEPLOY" | "FACTORY_CLONE";
    opcode?: number | undefined;
    alkaneId?: string | undefined;
    amount?: string | undefined;
}, {
    type: "TRANSFER" | "CONTRACT_CALL" | "CONTRACT_DEPLOY" | "FACTORY_DEPLOY" | "FACTORY_CLONE";
    opcode?: number | undefined;
    alkaneId?: string | undefined;
    amount?: string | undefined;
}>;
export type ProtostoneMessage = z.infer<typeof ProtostoneMessageSchema>;
export declare const AlkaneTokenIdSchema: z.ZodObject<{
    block: z.ZodString;
    tx: z.ZodString;
}, "strict", z.ZodTypeAny, {
    block: string;
    tx: string;
}, {
    block: string;
    tx: string;
}>;
export type AlkaneTokenId = z.infer<typeof AlkaneTokenIdSchema>;
export declare const IncomingAlkaneSchema: z.ZodObject<{
    id: z.ZodObject<{
        block: z.ZodString;
        tx: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        block: string;
        tx: string;
    }, {
        block: string;
        tx: string;
    }>;
    value: z.ZodString;
}, "strict", z.ZodTypeAny, {
    id: {
        block: string;
        tx: string;
    };
    value: string;
}, {
    id: {
        block: string;
        tx: string;
    };
    value: string;
}>;
export type IncomingAlkane = z.infer<typeof IncomingAlkaneSchema>;
export declare const AlkaneTraceContextSchema: z.ZodObject<{
    myself: z.ZodObject<{
        block: z.ZodString;
        tx: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        block: string;
        tx: string;
    }, {
        block: string;
        tx: string;
    }>;
    caller: z.ZodObject<{
        block: z.ZodString;
        tx: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        block: string;
        tx: string;
    }, {
        block: string;
        tx: string;
    }>;
    inputs: z.ZodArray<z.ZodString, "many">;
    incomingAlkanes: z.ZodArray<z.ZodObject<{
        id: z.ZodObject<{
            block: z.ZodString;
            tx: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            block: string;
            tx: string;
        }, {
            block: string;
            tx: string;
        }>;
        value: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        id: {
            block: string;
            tx: string;
        };
        value: string;
    }, {
        id: {
            block: string;
            tx: string;
        };
        value: string;
    }>, "many">;
    vout: z.ZodNumber;
}, "strict", z.ZodTypeAny, {
    myself: {
        block: string;
        tx: string;
    };
    caller: {
        block: string;
        tx: string;
    };
    inputs: string[];
    incomingAlkanes: {
        id: {
            block: string;
            tx: string;
        };
        value: string;
    }[];
    vout: number;
}, {
    myself: {
        block: string;
        tx: string;
    };
    caller: {
        block: string;
        tx: string;
    };
    inputs: string[];
    incomingAlkanes: {
        id: {
            block: string;
            tx: string;
        };
        value: string;
    }[];
    vout: number;
}>;
export type AlkaneTraceContext = z.infer<typeof AlkaneTraceContextSchema>;
export declare const StorageEntrySchema: z.ZodObject<{
    key: z.ZodString;
    value: z.ZodString;
}, "strict", z.ZodTypeAny, {
    value: string;
    key: string;
}, {
    value: string;
    key: string;
}>;
export type StorageEntry = z.infer<typeof StorageEntrySchema>;
export declare const AlkaneCreateEventSchema: z.ZodObject<{
    event: z.ZodLiteral<"create">;
    data: z.ZodObject<{
        block: z.ZodString;
        tx: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        block: string;
        tx: string;
    }, {
        block: string;
        tx: string;
    }>;
}, "strict", z.ZodTypeAny, {
    event: "create";
    data: {
        block: string;
        tx: string;
    };
}, {
    event: "create";
    data: {
        block: string;
        tx: string;
    };
}>;
export type AlkaneCreateEvent = z.infer<typeof AlkaneCreateEventSchema>;
export declare const AlkaneInvokeEventSchema: z.ZodObject<{
    event: z.ZodLiteral<"invoke">;
    data: z.ZodObject<{
        type: z.ZodLiteral<"call">;
        context: z.ZodObject<{
            myself: z.ZodObject<{
                block: z.ZodString;
                tx: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                block: string;
                tx: string;
            }, {
                block: string;
                tx: string;
            }>;
            caller: z.ZodObject<{
                block: z.ZodString;
                tx: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                block: string;
                tx: string;
            }, {
                block: string;
                tx: string;
            }>;
            inputs: z.ZodArray<z.ZodString, "many">;
            incomingAlkanes: z.ZodArray<z.ZodObject<{
                id: z.ZodObject<{
                    block: z.ZodString;
                    tx: z.ZodString;
                }, "strict", z.ZodTypeAny, {
                    block: string;
                    tx: string;
                }, {
                    block: string;
                    tx: string;
                }>;
                value: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }, {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }>, "many">;
            vout: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            myself: {
                block: string;
                tx: string;
            };
            caller: {
                block: string;
                tx: string;
            };
            inputs: string[];
            incomingAlkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            vout: number;
        }, {
            myself: {
                block: string;
                tx: string;
            };
            caller: {
                block: string;
                tx: string;
            };
            inputs: string[];
            incomingAlkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            vout: number;
        }>;
        fuel: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "call";
        context: {
            myself: {
                block: string;
                tx: string;
            };
            caller: {
                block: string;
                tx: string;
            };
            inputs: string[];
            incomingAlkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            vout: number;
        };
        fuel: number;
    }, {
        type: "call";
        context: {
            myself: {
                block: string;
                tx: string;
            };
            caller: {
                block: string;
                tx: string;
            };
            inputs: string[];
            incomingAlkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            vout: number;
        };
        fuel: number;
    }>;
}, "strict", z.ZodTypeAny, {
    event: "invoke";
    data: {
        type: "call";
        context: {
            myself: {
                block: string;
                tx: string;
            };
            caller: {
                block: string;
                tx: string;
            };
            inputs: string[];
            incomingAlkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            vout: number;
        };
        fuel: number;
    };
}, {
    event: "invoke";
    data: {
        type: "call";
        context: {
            myself: {
                block: string;
                tx: string;
            };
            caller: {
                block: string;
                tx: string;
            };
            inputs: string[];
            incomingAlkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            vout: number;
        };
        fuel: number;
    };
}>;
export type AlkaneInvokeEvent = z.infer<typeof AlkaneInvokeEventSchema>;
export declare const AlkaneReturnEventSchema: z.ZodObject<{
    event: z.ZodLiteral<"return">;
    data: z.ZodObject<{
        status: z.ZodEnum<["success", "revert"]>;
        response: z.ZodObject<{
            alkanes: z.ZodArray<z.ZodObject<{
                id: z.ZodObject<{
                    block: z.ZodString;
                    tx: z.ZodString;
                }, "strict", z.ZodTypeAny, {
                    block: string;
                    tx: string;
                }, {
                    block: string;
                    tx: string;
                }>;
                value: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }, {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }>, "many">;
            data: z.ZodString;
            storage: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                value: string;
                key: string;
            }, {
                value: string;
                key: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            alkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            data: string;
            storage: {
                value: string;
                key: string;
            }[];
        }, {
            alkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            data: string;
            storage: {
                value: string;
                key: string;
            }[];
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "success" | "revert";
        response: {
            alkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            data: string;
            storage: {
                value: string;
                key: string;
            }[];
        };
    }, {
        status: "success" | "revert";
        response: {
            alkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            data: string;
            storage: {
                value: string;
                key: string;
            }[];
        };
    }>;
}, "strict", z.ZodTypeAny, {
    event: "return";
    data: {
        status: "success" | "revert";
        response: {
            alkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            data: string;
            storage: {
                value: string;
                key: string;
            }[];
        };
    };
}, {
    event: "return";
    data: {
        status: "success" | "revert";
        response: {
            alkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            data: string;
            storage: {
                value: string;
                key: string;
            }[];
        };
    };
}>;
export type AlkaneReturnEvent = z.infer<typeof AlkaneReturnEventSchema>;
export declare const AlkaneTraceEventSchema: z.ZodUnion<[z.ZodObject<{
    event: z.ZodLiteral<"create">;
    data: z.ZodObject<{
        block: z.ZodString;
        tx: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        block: string;
        tx: string;
    }, {
        block: string;
        tx: string;
    }>;
}, "strict", z.ZodTypeAny, {
    event: "create";
    data: {
        block: string;
        tx: string;
    };
}, {
    event: "create";
    data: {
        block: string;
        tx: string;
    };
}>, z.ZodObject<{
    event: z.ZodLiteral<"invoke">;
    data: z.ZodObject<{
        type: z.ZodLiteral<"call">;
        context: z.ZodObject<{
            myself: z.ZodObject<{
                block: z.ZodString;
                tx: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                block: string;
                tx: string;
            }, {
                block: string;
                tx: string;
            }>;
            caller: z.ZodObject<{
                block: z.ZodString;
                tx: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                block: string;
                tx: string;
            }, {
                block: string;
                tx: string;
            }>;
            inputs: z.ZodArray<z.ZodString, "many">;
            incomingAlkanes: z.ZodArray<z.ZodObject<{
                id: z.ZodObject<{
                    block: z.ZodString;
                    tx: z.ZodString;
                }, "strict", z.ZodTypeAny, {
                    block: string;
                    tx: string;
                }, {
                    block: string;
                    tx: string;
                }>;
                value: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }, {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }>, "many">;
            vout: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            myself: {
                block: string;
                tx: string;
            };
            caller: {
                block: string;
                tx: string;
            };
            inputs: string[];
            incomingAlkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            vout: number;
        }, {
            myself: {
                block: string;
                tx: string;
            };
            caller: {
                block: string;
                tx: string;
            };
            inputs: string[];
            incomingAlkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            vout: number;
        }>;
        fuel: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "call";
        context: {
            myself: {
                block: string;
                tx: string;
            };
            caller: {
                block: string;
                tx: string;
            };
            inputs: string[];
            incomingAlkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            vout: number;
        };
        fuel: number;
    }, {
        type: "call";
        context: {
            myself: {
                block: string;
                tx: string;
            };
            caller: {
                block: string;
                tx: string;
            };
            inputs: string[];
            incomingAlkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            vout: number;
        };
        fuel: number;
    }>;
}, "strict", z.ZodTypeAny, {
    event: "invoke";
    data: {
        type: "call";
        context: {
            myself: {
                block: string;
                tx: string;
            };
            caller: {
                block: string;
                tx: string;
            };
            inputs: string[];
            incomingAlkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            vout: number;
        };
        fuel: number;
    };
}, {
    event: "invoke";
    data: {
        type: "call";
        context: {
            myself: {
                block: string;
                tx: string;
            };
            caller: {
                block: string;
                tx: string;
            };
            inputs: string[];
            incomingAlkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            vout: number;
        };
        fuel: number;
    };
}>, z.ZodObject<{
    event: z.ZodLiteral<"return">;
    data: z.ZodObject<{
        status: z.ZodEnum<["success", "revert"]>;
        response: z.ZodObject<{
            alkanes: z.ZodArray<z.ZodObject<{
                id: z.ZodObject<{
                    block: z.ZodString;
                    tx: z.ZodString;
                }, "strict", z.ZodTypeAny, {
                    block: string;
                    tx: string;
                }, {
                    block: string;
                    tx: string;
                }>;
                value: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }, {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }>, "many">;
            data: z.ZodString;
            storage: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                value: string;
                key: string;
            }, {
                value: string;
                key: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            alkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            data: string;
            storage: {
                value: string;
                key: string;
            }[];
        }, {
            alkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            data: string;
            storage: {
                value: string;
                key: string;
            }[];
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "success" | "revert";
        response: {
            alkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            data: string;
            storage: {
                value: string;
                key: string;
            }[];
        };
    }, {
        status: "success" | "revert";
        response: {
            alkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            data: string;
            storage: {
                value: string;
                key: string;
            }[];
        };
    }>;
}, "strict", z.ZodTypeAny, {
    event: "return";
    data: {
        status: "success" | "revert";
        response: {
            alkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            data: string;
            storage: {
                value: string;
                key: string;
            }[];
        };
    };
}, {
    event: "return";
    data: {
        status: "success" | "revert";
        response: {
            alkanes: {
                id: {
                    block: string;
                    tx: string;
                };
                value: string;
            }[];
            data: string;
            storage: {
                value: string;
                key: string;
            }[];
        };
    };
}>]>;
export type AlkaneTraceEvent = z.infer<typeof AlkaneTraceEventSchema>;
export declare const AlkaneTxInfoSchema: z.ZodObject<{
    txid: z.ZodString;
    protostones: z.ZodArray<z.ZodObject<{
        type: z.ZodEnum<["TRANSFER", "CONTRACT_CALL", "CONTRACT_DEPLOY", "FACTORY_DEPLOY", "FACTORY_CLONE"]>;
        alkaneId: z.ZodOptional<z.ZodString>;
        opcode: z.ZodOptional<z.ZodNumber>;
        amount: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        type: "TRANSFER" | "CONTRACT_CALL" | "CONTRACT_DEPLOY" | "FACTORY_DEPLOY" | "FACTORY_CLONE";
        opcode?: number | undefined;
        alkaneId?: string | undefined;
        amount?: string | undefined;
    }, {
        type: "TRANSFER" | "CONTRACT_CALL" | "CONTRACT_DEPLOY" | "FACTORY_DEPLOY" | "FACTORY_CLONE";
        opcode?: number | undefined;
        alkaneId?: string | undefined;
        amount?: string | undefined;
    }>, "many">;
    trace: z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        event: z.ZodLiteral<"create">;
        data: z.ZodObject<{
            block: z.ZodString;
            tx: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            block: string;
            tx: string;
        }, {
            block: string;
            tx: string;
        }>;
    }, "strict", z.ZodTypeAny, {
        event: "create";
        data: {
            block: string;
            tx: string;
        };
    }, {
        event: "create";
        data: {
            block: string;
            tx: string;
        };
    }>, z.ZodObject<{
        event: z.ZodLiteral<"invoke">;
        data: z.ZodObject<{
            type: z.ZodLiteral<"call">;
            context: z.ZodObject<{
                myself: z.ZodObject<{
                    block: z.ZodString;
                    tx: z.ZodString;
                }, "strict", z.ZodTypeAny, {
                    block: string;
                    tx: string;
                }, {
                    block: string;
                    tx: string;
                }>;
                caller: z.ZodObject<{
                    block: z.ZodString;
                    tx: z.ZodString;
                }, "strict", z.ZodTypeAny, {
                    block: string;
                    tx: string;
                }, {
                    block: string;
                    tx: string;
                }>;
                inputs: z.ZodArray<z.ZodString, "many">;
                incomingAlkanes: z.ZodArray<z.ZodObject<{
                    id: z.ZodObject<{
                        block: z.ZodString;
                        tx: z.ZodString;
                    }, "strict", z.ZodTypeAny, {
                        block: string;
                        tx: string;
                    }, {
                        block: string;
                        tx: string;
                    }>;
                    value: z.ZodString;
                }, "strict", z.ZodTypeAny, {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }, {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }>, "many">;
                vout: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                myself: {
                    block: string;
                    tx: string;
                };
                caller: {
                    block: string;
                    tx: string;
                };
                inputs: string[];
                incomingAlkanes: {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }[];
                vout: number;
            }, {
                myself: {
                    block: string;
                    tx: string;
                };
                caller: {
                    block: string;
                    tx: string;
                };
                inputs: string[];
                incomingAlkanes: {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }[];
                vout: number;
            }>;
            fuel: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "call";
            context: {
                myself: {
                    block: string;
                    tx: string;
                };
                caller: {
                    block: string;
                    tx: string;
                };
                inputs: string[];
                incomingAlkanes: {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }[];
                vout: number;
            };
            fuel: number;
        }, {
            type: "call";
            context: {
                myself: {
                    block: string;
                    tx: string;
                };
                caller: {
                    block: string;
                    tx: string;
                };
                inputs: string[];
                incomingAlkanes: {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }[];
                vout: number;
            };
            fuel: number;
        }>;
    }, "strict", z.ZodTypeAny, {
        event: "invoke";
        data: {
            type: "call";
            context: {
                myself: {
                    block: string;
                    tx: string;
                };
                caller: {
                    block: string;
                    tx: string;
                };
                inputs: string[];
                incomingAlkanes: {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }[];
                vout: number;
            };
            fuel: number;
        };
    }, {
        event: "invoke";
        data: {
            type: "call";
            context: {
                myself: {
                    block: string;
                    tx: string;
                };
                caller: {
                    block: string;
                    tx: string;
                };
                inputs: string[];
                incomingAlkanes: {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }[];
                vout: number;
            };
            fuel: number;
        };
    }>, z.ZodObject<{
        event: z.ZodLiteral<"return">;
        data: z.ZodObject<{
            status: z.ZodEnum<["success", "revert"]>;
            response: z.ZodObject<{
                alkanes: z.ZodArray<z.ZodObject<{
                    id: z.ZodObject<{
                        block: z.ZodString;
                        tx: z.ZodString;
                    }, "strict", z.ZodTypeAny, {
                        block: string;
                        tx: string;
                    }, {
                        block: string;
                        tx: string;
                    }>;
                    value: z.ZodString;
                }, "strict", z.ZodTypeAny, {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }, {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }>, "many">;
                data: z.ZodString;
                storage: z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodString;
                }, "strict", z.ZodTypeAny, {
                    value: string;
                    key: string;
                }, {
                    value: string;
                    key: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                alkanes: {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }[];
                data: string;
                storage: {
                    value: string;
                    key: string;
                }[];
            }, {
                alkanes: {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }[];
                data: string;
                storage: {
                    value: string;
                    key: string;
                }[];
            }>;
        }, "strip", z.ZodTypeAny, {
            status: "success" | "revert";
            response: {
                alkanes: {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }[];
                data: string;
                storage: {
                    value: string;
                    key: string;
                }[];
            };
        }, {
            status: "success" | "revert";
            response: {
                alkanes: {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }[];
                data: string;
                storage: {
                    value: string;
                    key: string;
                }[];
            };
        }>;
    }, "strict", z.ZodTypeAny, {
        event: "return";
        data: {
            status: "success" | "revert";
            response: {
                alkanes: {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }[];
                data: string;
                storage: {
                    value: string;
                    key: string;
                }[];
            };
        };
    }, {
        event: "return";
        data: {
            status: "success" | "revert";
            response: {
                alkanes: {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }[];
                data: string;
                storage: {
                    value: string;
                    key: string;
                }[];
            };
        };
    }>]>, "many">>;
}, "strict", z.ZodTypeAny, {
    txid: string;
    protostones: {
        type: "TRANSFER" | "CONTRACT_CALL" | "CONTRACT_DEPLOY" | "FACTORY_DEPLOY" | "FACTORY_CLONE";
        opcode?: number | undefined;
        alkaneId?: string | undefined;
        amount?: string | undefined;
    }[];
    trace: ({
        event: "create";
        data: {
            block: string;
            tx: string;
        };
    } | {
        event: "invoke";
        data: {
            type: "call";
            context: {
                myself: {
                    block: string;
                    tx: string;
                };
                caller: {
                    block: string;
                    tx: string;
                };
                inputs: string[];
                incomingAlkanes: {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }[];
                vout: number;
            };
            fuel: number;
        };
    } | {
        event: "return";
        data: {
            status: "success" | "revert";
            response: {
                alkanes: {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }[];
                data: string;
                storage: {
                    value: string;
                    key: string;
                }[];
            };
        };
    })[] | null;
}, {
    txid: string;
    protostones: {
        type: "TRANSFER" | "CONTRACT_CALL" | "CONTRACT_DEPLOY" | "FACTORY_DEPLOY" | "FACTORY_CLONE";
        opcode?: number | undefined;
        alkaneId?: string | undefined;
        amount?: string | undefined;
    }[];
    trace: ({
        event: "create";
        data: {
            block: string;
            tx: string;
        };
    } | {
        event: "invoke";
        data: {
            type: "call";
            context: {
                myself: {
                    block: string;
                    tx: string;
                };
                caller: {
                    block: string;
                    tx: string;
                };
                inputs: string[];
                incomingAlkanes: {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }[];
                vout: number;
            };
            fuel: number;
        };
    } | {
        event: "return";
        data: {
            status: "success" | "revert";
            response: {
                alkanes: {
                    id: {
                        block: string;
                        tx: string;
                    };
                    value: string;
                }[];
                data: string;
                storage: {
                    value: string;
                    key: string;
                }[];
            };
        };
    })[] | null;
}>;
export type AlkaneTxInfo = z.infer<typeof AlkaneTxInfoSchema>;
//# sourceMappingURL=alkane.d.ts.map