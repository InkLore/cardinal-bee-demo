"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlkaneTxInfoSchema = exports.AlkaneTraceEventSchema = exports.AlkaneReturnEventSchema = exports.AlkaneInvokeEventSchema = exports.AlkaneCreateEventSchema = exports.StorageEntrySchema = exports.AlkaneTraceContextSchema = exports.IncomingAlkaneSchema = exports.AlkaneTokenIdSchema = exports.ProtostoneMessageSchema = exports.AlkaneMetaSchema = exports.AlkaneMethodSchema = exports.AlkaneMethodParamSchema = exports.AlkaneUtxoSchema = exports.AlkaneBalanceSchema = exports.AlkaneWithSupplySchema = exports.AlkaneBaseSchema = void 0;
const zod_1 = require("zod");
// When getting a list of alkanes:
exports.AlkaneBaseSchema = zod_1.z
    .object({
    id: zod_1.z.string(),
    name: zod_1.z.string().nullable(),
    symbol: zod_1.z.string().nullable(),
    type: zod_1.z.enum(["TOKEN", "CONTRACT", "NFT_COLLECTION", "NFT_ITEM"]),
    logo_url: zod_1.z.string().nullable(),
    premined_supply: zod_1.z.string(),
    amount_per_mint: zod_1.z.string().nullable(),
    mint_count_cap: zod_1.z.string().nullable(),
    deploy_txid: zod_1.z.string().nullable(),
    deploy_timestamp: zod_1.z.string().nullable(),
})
    .strict();
// When getting a specific alkane:
exports.AlkaneWithSupplySchema = exports.AlkaneBaseSchema.extend({
    current_supply: zod_1.z.string(),
    current_mint_count: zod_1.z.number(),
});
// Alkane balance for address
exports.AlkaneBalanceSchema = zod_1.z
    .object({
    id: zod_1.z.string(),
    name: zod_1.z.string().nullable(),
    symbol: zod_1.z.string().nullable(),
    balance: zod_1.z.string(),
})
    .strict();
// Alkane UTXO
exports.AlkaneUtxoSchema = zod_1.z
    .object({
    outpoint: zod_1.z.string(),
    value: zod_1.z.number(),
    alkanes: zod_1.z.array(exports.AlkaneBalanceSchema),
})
    .strict();
// Alkane contract method parameter
exports.AlkaneMethodParamSchema = zod_1.z
    .object({
    type: zod_1.z.string(),
    name: zod_1.z.string(),
})
    .strict();
// Alkane contract method
exports.AlkaneMethodSchema = zod_1.z
    .object({
    name: zod_1.z.string(),
    opcode: zod_1.z.number(),
    params: zod_1.z.array(exports.AlkaneMethodParamSchema),
    returns: zod_1.z.string(),
})
    .strict();
// Alkane metadata
exports.AlkaneMetaSchema = zod_1.z
    .object({
    name: zod_1.z.string().nullable(),
    methods: zod_1.z.array(exports.AlkaneMethodSchema).nullable(),
})
    .strict();
// Protostone message
exports.ProtostoneMessageSchema = zod_1.z
    .object({
    type: zod_1.z.enum(["TRANSFER", "CONTRACT_CALL", "CONTRACT_DEPLOY", "FACTORY_DEPLOY", "FACTORY_CLONE"]),
    alkaneId: zod_1.z.string().optional(),
    opcode: zod_1.z.number().optional(),
    amount: zod_1.z.string().optional(),
})
    .strict();
// Alkane token ID
exports.AlkaneTokenIdSchema = zod_1.z
    .object({
    block: zod_1.z.string(),
    tx: zod_1.z.string(),
})
    .strict();
// Incoming alkane
exports.IncomingAlkaneSchema = zod_1.z
    .object({
    id: exports.AlkaneTokenIdSchema,
    value: zod_1.z.string(),
})
    .strict();
// Alkane trace context
exports.AlkaneTraceContextSchema = zod_1.z
    .object({
    myself: exports.AlkaneTokenIdSchema,
    caller: exports.AlkaneTokenIdSchema,
    inputs: zod_1.z.array(zod_1.z.string()),
    incomingAlkanes: zod_1.z.array(exports.IncomingAlkaneSchema),
    vout: zod_1.z.number(),
})
    .strict();
// Storage entry
exports.StorageEntrySchema = zod_1.z
    .object({
    key: zod_1.z.string(),
    value: zod_1.z.string(),
})
    .strict();
// Alkane create event
exports.AlkaneCreateEventSchema = zod_1.z
    .object({
    event: zod_1.z.literal("create"),
    data: exports.AlkaneTokenIdSchema,
})
    .strict();
// Alkane invoke event
exports.AlkaneInvokeEventSchema = zod_1.z
    .object({
    event: zod_1.z.literal("invoke"),
    data: zod_1.z.object({
        type: zod_1.z.literal("call"),
        context: exports.AlkaneTraceContextSchema,
        fuel: zod_1.z.number(),
    }),
})
    .strict();
// Alkane return event
exports.AlkaneReturnEventSchema = zod_1.z
    .object({
    event: zod_1.z.literal("return"),
    data: zod_1.z.object({
        status: zod_1.z.enum(["success", "revert"]),
        response: zod_1.z.object({
            alkanes: zod_1.z.array(exports.IncomingAlkaneSchema),
            data: zod_1.z.string(),
            storage: zod_1.z.array(exports.StorageEntrySchema),
        }),
    }),
})
    .strict();
// Alkane trace event (union of all event types)
exports.AlkaneTraceEventSchema = zod_1.z.union([
    exports.AlkaneCreateEventSchema,
    exports.AlkaneInvokeEventSchema,
    exports.AlkaneReturnEventSchema,
]);
// Alkane transaction info
exports.AlkaneTxInfoSchema = zod_1.z
    .object({
    txid: zod_1.z.string(),
    protostones: zod_1.z.array(exports.ProtostoneMessageSchema),
    trace: zod_1.z.array(exports.AlkaneTraceEventSchema).nullable(),
})
    .strict();
//# sourceMappingURL=alkane.js.map